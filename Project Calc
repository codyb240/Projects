/*
------------------------------------------------
Programer: Cody Bruehl
Due date: 3/23/2021
Purpose:
This program is a simple calculator simulation. 
It reads an infix algebraic expression with 
numbers and simple operations. The program 
converts an infix expression into an equivalent 
postfix expression, and then evaluates the 
postfix expression, and then prints the result 
if input expression is correct, otherwise prints 
error messages.
------------------------------------------------
*/
#include<iostream>
#include<bits/stdc++.h>
#include<string.h>
#include<cmath>
#include<stack>
using namespace std;

class Calculator
{
	private:
	string infix, postfix;
	char answer;

	public:
	Calculator();
	void begin();
	bool match(string t);
	void infix_postfix_conversion(string o);
	int postfix_evaluation(string postfix);
	int before(char s);
};

Calculator::Calculator(){ 											//Default constructor
	infix = "";
	postfix = "";
	answer = 'a';
}
bool Brackets(char beginning,char ending) 							//Function working with match
{
	if(beginning == '[' && ending == ']') 
	return true;
	else if(beginning == '{' && ending == '}') 
		return true;
	else if(beginning == '(' && ending == ')') 
		return true;
	else 
		return false;
}

bool Calculator::match(string check) 							//Function to balance parenthesis
{
	stack<char>  S;
		for(int i =0;i<check.length();i++)
	{
			if(check[i] == ')' || check[i] == '}' || check[i] == ']')
				S.push(check[i]);
			else if(check[i] == '(' || check[i] == '{' || check[i] == '[')
		{
			if(S.empty() || !Brackets(S.top(),check[i]))
				return false;
			else
				S.pop();
		}
	}
	return S.empty() ? true:false;
}


void Calculator::infix_postfix_conversion(string o){
    std::stack<char> st; 
    st.push('N'); 
    int k = o.length();
    for(int i = 0; i < k; i++) 
    {  
        if((o[i] >= '0' && o[i] <= '9'))				// If character is operand
        	postfix += o[i]; 							// add to output string. 
        															 
        else if(o[i] == '(') 							// If character is ‘(‘, 
        	st.push('('); 								//  push to stack.
          
        else if(o[i] == ')') 							// If character is ‘)’,  
        												// remove and output string from stack 
        												// until ‘(‘ is encountered.
        { 
            while(st.top() != 'N' && st.top() != '(') 
            { 
                char c = st.top(); 
                st.pop(); 
               postfix += c; 
            } 
            if(st.top() == '(') 
            { 
                char c = st.top(); 
                st.pop(); 
            } 
        }  
        else{ 														//If operator is scanned
            while(st.top() != 'N' && before(o[i]) 
							<= before(st.top())) { 
                char c = st.top(); 
                st.pop(); 
                postfix += c; 
            } 
            st.push(o[i]); 
        } 
  
    }  
    while(st.top() != 'N') 											// remove all remaining elements from stack
    { 
        char c = st.top(); 
        st.pop(); 
        postfix += c; 
    } 
}

int Calculator::before(char s){ 								// Function for finding operating precedence
    if(s == '+' || s == '-') return 1;
	else if(s == '*' || s == '/') return 2;
	else if(s == '^') return 3;
 	else return -1;
}


float scanNum(char r) {
   int value;
   value = r;
   return float(value-'0');  						 				//return float from character
}
int isOperator(char r) {
   if(r == '+'|| r == '-'|| r == '*'|| r == '/' || r == '^')
    	return 1;    													//character = operator
   		return -1;   													//character != operator
}
int isOperand(char r) {
	if(r >= '0' && r <= '9')
    	return 1;   													//character = operand
   		return -1;   													//character != operand
}
float operation(int a, int b, char s) {							//Perform operation
   if(s == '+') return b+a;
   else if(s == '-') return b-a;
   else if(s == '*') return b*a;
   else if(s == '/') return b/a;
   else if(s == '^') return pow(b,a); 												//find b^a
   else return INT_MIN; 												//return negative infinity
}
	
int Calculator::postfix_evaluation(string postfix)					// Function to return value of
																	// expression after evaluation.
{
   int y, z;
   stack<float> fl;
   
   string::iterator i;
   		for(i=postfix.begin(); i!=postfix.end(); i++) {				//read elements; perform postfix evaluation
     
	  if(isOperand(*i) > 0) {
         fl.push(scanNum(*i));
      }
	  else if(isOperator(*i) != -1) {
	  	
         y = fl.top();
         fl.pop();
         z = fl.top();
         fl.pop();
         fl.push(operation(y, z, *i));
    	}
}
	return fl.top();
}

void Calculator::begin(){
	do {
		cout<<"\nEnter an infix expression: ";
		cin >> infix;  												//read the expression from keyboard

		if(match(infix))
		{
			infix_postfix_conversion(infix);
			cout << postfix_evaluation(postfix) << endl;
		}
		else{
			cout << "Error, Group operator did not match, please input again." << endl;
			continue; 												//go back to the top of the loop
		}
		cout<<"\nDo it again? y/n: ";
		cin >> answer;
			
	if( tolower(answer) == 'y')
			continue; 												//go back to the top of the loop
		else{
			cout<< "THANK YOU! "<<endl;
			break;  												//break out of the loop
		}
			
	}while(true);

}

int main() {
    Calculator mycal;

	mycal.begin();
	return 0;
}
